Dockerfile
A
Dockerfile is a text document that contains all the commands a user could call on the command line to
assemble an image. Using the docker build, users can create an automated build that executes several
command line instructions in succession.

It depends on some predefined Keywords that has a significant meaning defined by Docker for creating Docker applications

FROM --> The
FROM keyword is used to define the base image, on which we
will be building. (FROM ubuntu:latest)

ADD
The
ADD keyword is used to add files to the container being built. The
syntax used is:
ADD <source> <destination in container> { also work for remote place and download it}

COPY 
COPY  <source> <destination in container> { no remote download}

RUN
The
RUN keyword is used to add layers to the base image,
by installing components. Each RUN statement adds a
new layer to the docker image. 
RUN apt-get update

ENV
The
ENV keyword is used to define environment variables
in the container runtime.

CMD
The
CMD keyword is used to run commands on the start of the
container. These commands run only when there is no argument
specified while running the container.
Dockerfile


ENTRYPOINT
The
ENTRYPOINT keyword is used strictly to run commands the
moment the container initializes. The

EXPOSE 804 --- it define which port u want ur conatiner to get the traffic 

WORKDIR
MAKEDIR 

###the name has to be same (Dockerfile)

FROM ubuntu:24.04
RUN apt-get update
RUN apt-get install nginx -y
COPY index.html /var/www/html
CMD nginx -g 'daemon off;'

docker build .

docker run --name nginx ubuntu:24.02 -p 8083:80(hostport:containerport)

PUSH
-----
Get the image ---> Change the tag of the imaage based on your repo ---> Push the image (Login must)


Parent Image vs Base Image

100 containers

docker run
docker run 

Docker Compose samle file:

docker run --name nginx ubuntu:24.02 -p 8083:80 -v hostpath:contianer

version: '3'
services:  -- stands for holding the entire stack of  the containers list
  conatiner 1:
    image: ubuntu:24.02
    ports:
    - "8083:80"
  container 2:
    image: image:v2
    ports:
    - "8084:80"
    env:
    - email: akas@gmail.command
    - config: test
    volumes:
    - db_data:/app
    restart:  always
volumes:
 db_data:
network:
  

docker-compose down -d  


       